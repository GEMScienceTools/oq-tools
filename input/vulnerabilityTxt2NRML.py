# Copyright (c) 2010-2012, GEM Foundation.
#
# exposureTxt2NRML is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# exposureTxt2NRML is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with exposureTxt2NRML.  If not, see <http://www.gnu.org/licenses/>.
"""
vulnerabilityTxt2NRML creates a vulnerability input file format (NRML)
taking a vulnerability in a fixed txt format.
"""

import sys
import argparse
from lxml import etree

NRML_NS = 'http://openquake.org/xmlns/nrml/0.3'
GML_NS = 'http://www.opengis.net/gml'
NRML = "{%s}" % NRML_NS
GML = "{%s}" % GML_NS
NSMAP = {None: NRML_NS, "gml": GML_NS}

ROOT = "%snrml" % NRML
GML_ID = "%sid" % GML
CONFIG = "%sconfig" % NRML

# Vulnerability tagnames

VULNERABILITY_MOD = '%svulnerabilityModel' % NRML
DISC_VULN_SET = '%sdiscreteVulnerabilitySet' % NRML
IML = '%sIML' % NRML
DISC_VULN = '%sdiscreteVulnerability' % NRML
LOSS_RATIO = '%slossRatio' % NRML
COEFF_VAR = '%scoefficientsVariation' % NRML

# Vulnerability attributes

VULN_SET_ID = 'vulnerabilitySetID'
ASSET_CAT = 'assetCategory'
LOSS_CAT = 'lossCategory'
IMT = 'IMT'
VULN_FUN_ID = 'vulnerabilityFunctionID'
PROB_DISTR = 'probabilisticDistribution'

NO_VALUE = ''


class VulnerabilityTxtReader(object):

    FST_LINE_FIELDNAMES = ['vulnerabilitySetID', 'assetCategory',
                           'lossCategory', 'IMT']
    SND_LINE_FIELDNAME = 'IML'

    def __init__(self, txtfile):
        self.txtfile = txtfile

    def _move_to_beginning_file(self):
        self.txtfile.seek(0)

    def _move_to_dscr_vuln_def(self):
        # It assumes that discreteVulnerability definitions
        # start from 4th line, so it's necessary to skip
        # the first three lines.
        self._move_to_beginning_file()
        lines_to_skip = 3
        for i in xrange(0, lines_to_skip):
            self.txtfile.readline()

    def _acquire_vuln_lines(self):
        lines = []
        for line in self.txtfile:
            lines.append(line.strip())
        if len(lines) % 3 != 0:
            raise RuntimeError('Every vulnerability is composed by three '
                               'lines: metadata, lossRatio, '
                               'coefficientVariations')
        return lines

    @property
    def metadata(self):
        self._move_to_beginning_file()
        fst_line_values = [field.strip() for field in
                           (self.txtfile.readline()).split(',')]
        metadata = dict(zip(self.FST_LINE_FIELDNAMES, fst_line_values))
        snd_line_iml_values = [field.strip() for field in
                               (self.txtfile.readline()).split(',')]
        metadata[self.SND_LINE_FIELDNAME] = snd_line_iml_values
        return metadata

    def readvulnerability(self):
        self._move_to_dscr_vuln_def()
        lines = self._acquire_vuln_lines()
        definitions = []
        for i in xrange(0, len(lines), 3):
            meta_values = lines[i].split(',')
            lossratio_values = lines[i + 1].split(',')
            coeffvar_values = lines[i + 2].split(',')
            vul_fn_id, prob_distr = meta_values[0], meta_values[1]
            vuln_def = dict(vulnerabilityFunctionId=vul_fn_id,
                probabilityDistribution=prob_distr,
                lossRatio=lossratio_values,
                coefficientVariation=coeffvar_values)
            definitions.append(vuln_def)
        return definitions


class VulnerabilityWriter(object):

    def _value_defined_for(self, dict, attrib):
        return dict[attrib] != NO_VALUE

    def serialize(self, filename, metadata, vuln_definitions):
        root_elem = self._write_header(metadata)
        root_elem = self._write_vuln_def(root_elem, vuln_definitions)
        tree = etree.ElementTree(root_elem)
        with open(filename, 'w') as output_file:
            tree.write(output_file, xml_declaration=True,
                encoding='utf-8', pretty_print=True)

    def _write_header(self, metadata):
        root_elem = etree.Element(ROOT, nsmap=NSMAP)
        root_elem.attrib[GML_ID] = 'n1'
        vuln_mod_elem = etree.SubElement(
            root_elem, VULNERABILITY_MOD)
        config = etree.SubElement(
            vuln_mod_elem, CONFIG)
        vuln_set = etree.SubElement(
            vuln_mod_elem, DISC_VULN_SET)

        if self._value_defined_for(metadata, 'vulnerabilitySetID'):
            vuln_set.attrib[VULN_SET_ID] = metadata['vulnerabilitySetID']
        else:
            raise RuntimeError('vulnerabilitySetID is a required attribute, '
                               'a fix to the input file is necessary')

        if self._value_defined_for(metadata, 'assetCategory'):
            vuln_set.attrib[ASSET_CAT] = metadata['assetCategory']
        else:
            raise RuntimeError('assetCategory is a required attribute, '
                               'a fix to the input file is necessary')

        if self._value_defined_for(metadata, 'lossCategory'):
            vuln_set.attrib[LOSS_CAT] = metadata['lossCategory']
        else:
            raise RuntimeError('lossCategory is a required attribute, '
                               'a fix to the input file is necessary')

        iml_elem = etree.SubElement(
            vuln_set, IML)
        iml_elem.attrib[IMT] = metadata['IMT']
        iml_elem.text = ' '.join(metadata['IML'])
        return root_elem

    def _write_vuln_def(self, root_elem, vuln_definitions):
        disc_vuln_set = root_elem.find('.//%s' % DISC_VULN_SET)
        for vuln_def in vuln_definitions:
            vuln_def_elem = etree.SubElement(
                disc_vuln_set, DISC_VULN)

            if self._value_defined_for(vuln_def, 'vulnerabilityFunctionId'):
                vuln_def_elem.attrib[VULN_FUN_ID] = (
                    vuln_def['vulnerabilityFunctionId'])
            else:
                raise RuntimeError('vulnerabilityFunctionID is a required '
                                   'attribute, a fix to the input file is '
                                   'necessary')

            if self._value_defined_for(vuln_def, 'probabilityDistribution'):
                vuln_def_elem.attrib[PROB_DISTR] = (
                    vuln_def['probabilityDistribution'])
            else:
                raise RuntimeError('probabilityDistribution is a required '
                                   'attribute, a fix to the input file is '
                                   'necessary')

            loss_ratio_elem = etree.SubElement(
                vuln_def_elem, LOSS_RATIO)
            loss_ratio_elem.text = ' '.join(vuln_def['lossRatio'])
            coeff_var_elem = etree.SubElement(
                vuln_def_elem, COEFF_VAR)
            coeff_var_elem.text = ' '.join(vuln_def['coefficientVariation'])

        return root_elem


def cmd_parser():

    parser = argparse.ArgumentParser(prog='vulnerabilityTxt2NRML')

    parser.add_argument('-i', '--input-file',
        nargs=1,
        metavar='input file',
        dest='input_file',
        help='Specify the input file (i.e. vulnerability.txt)')

    parser.add_argument('-o', '--output-file',
        nargs=1,
        metavar='output file',
        dest='output_file',
        default='vulnerability_model.xml',
        help='Specify the output file (i.e. vulnerability_model.xml)')

    parser.add_argument('-v', '--version',
        action='version',
        version="%(prog)s 0.0.1")

    return parser

def main():

    parser = cmd_parser()
    if len(sys.argv) == 1:
        parser.print_help()
    else:
        args = parser.parse_args()
        with open(args.input_file[0]) as input_file:
            reader = VulnerabilityTxtReader(input_file)
            metadata = reader.metadata
            vuln_def = reader.readvulnerability()
        writer = VulnerabilityWriter()
        writer.serialize(args.output_file, metadata, vuln_def)

if __name__ == '__main__':
    main()